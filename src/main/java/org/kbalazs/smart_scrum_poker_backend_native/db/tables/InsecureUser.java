/*
 * This file is generated by jOOQ.
 */
package org.kbalazs.smart_scrum_poker_backend_native.db.tables;


import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.kbalazs.smart_scrum_poker_backend_native.db.Keys;
import org.kbalazs.smart_scrum_poker_backend_native.db.Public;
import org.kbalazs.smart_scrum_poker_backend_native.db.tables.records.InsecureUserRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class InsecureUser extends TableImpl<InsecureUserRecord> {

    private static final long serialVersionUID = 1308799391;

    /**
     * The reference instance of <code>public.insecure_user</code>
     */
    public static final InsecureUser INSECURE_USER = new InsecureUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<InsecureUserRecord> getRecordType() {
        return InsecureUserRecord.class;
    }

    /**
     * The column <code>public.insecure_user.id</code>.
     */
    public final TableField<InsecureUserRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.insecure_user.id_secure</code>.
     */
    public final TableField<InsecureUserRecord, UUID> ID_SECURE = createField(DSL.name("id_secure"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.insecure_user.user_name</code>.
     */
    public final TableField<InsecureUserRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.insecure_user.created_at</code>.
     */
    public final TableField<InsecureUserRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false), this, "");

    /**
     * Create a <code>public.insecure_user</code> table reference
     */
    public InsecureUser() {
        this(DSL.name("insecure_user"), null);
    }

    /**
     * Create an aliased <code>public.insecure_user</code> table reference
     */
    public InsecureUser(String alias) {
        this(DSL.name(alias), INSECURE_USER);
    }

    /**
     * Create an aliased <code>public.insecure_user</code> table reference
     */
    public InsecureUser(Name alias) {
        this(alias, INSECURE_USER);
    }

    private InsecureUser(Name alias, Table<InsecureUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private InsecureUser(Name alias, Table<InsecureUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> InsecureUser(Table<O> child, ForeignKey<O, InsecureUserRecord> key) {
        super(child, key, INSECURE_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<InsecureUserRecord, Long> getIdentity() {
        return Keys.IDENTITY_INSECURE_USER;
    }

    @Override
    public UniqueKey<InsecureUserRecord> getPrimaryKey() {
        return Keys.INSECURE_USER__PK___ID;
    }

    @Override
    public List<UniqueKey<InsecureUserRecord>> getKeys() {
        return Arrays.<UniqueKey<InsecureUserRecord>>asList(Keys.INSECURE_USER__PK___ID, Keys.INSECURE_USER__UNIQUE___ID_SECURE);
    }

    @Override
    public InsecureUser as(String alias) {
        return new InsecureUser(DSL.name(alias), this);
    }

    @Override
    public InsecureUser as(Name alias) {
        return new InsecureUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public InsecureUser rename(String name) {
        return new InsecureUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public InsecureUser rename(Name name) {
        return new InsecureUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, UUID, String, LocalDateTime> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
