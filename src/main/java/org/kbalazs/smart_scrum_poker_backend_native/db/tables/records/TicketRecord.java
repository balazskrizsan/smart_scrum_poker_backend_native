/*
 * This file is generated by jOOQ.
 */
package org.kbalazs.smart_scrum_poker_backend_native.db.tables.records;


import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;
import org.kbalazs.smart_scrum_poker_backend_native.db.tables.Ticket;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TicketRecord extends UpdatableRecordImpl<TicketRecord> implements Record5<Long, UUID, Long, String, Boolean> {

    private static final long serialVersionUID = 45184794;

    /**
     * Setter for <code>public.ticket.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.ticket.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.ticket.id_secure</code>.
     */
    public void setIdSecure(UUID value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.ticket.id_secure</code>.
     */
    public UUID getIdSecure() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.ticket.poker_id</code>.
     */
    public void setPokerId(Long value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.ticket.poker_id</code>.
     */
    public Long getPokerId() {
        return (Long) get(2);
    }

    /**
     * Setter for <code>public.ticket.name</code>.
     */
    public void setName(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.ticket.name</code>.
     */
    public String getName() {
        return (String) get(3);
    }

    /**
     * Setter for <code>public.ticket.active</code>.
     */
    public void setActive(Boolean value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.ticket.active</code>.
     */
    public Boolean getActive() {
        return (Boolean) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, UUID, Long, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, UUID, Long, String, Boolean> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Ticket.TICKET.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Ticket.TICKET.ID_SECURE;
    }

    @Override
    public Field<Long> field3() {
        return Ticket.TICKET.POKER_ID;
    }

    @Override
    public Field<String> field4() {
        return Ticket.TICKET.NAME;
    }

    @Override
    public Field<Boolean> field5() {
        return Ticket.TICKET.ACTIVE;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getIdSecure();
    }

    @Override
    public Long component3() {
        return getPokerId();
    }

    @Override
    public String component4() {
        return getName();
    }

    @Override
    public Boolean component5() {
        return getActive();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getIdSecure();
    }

    @Override
    public Long value3() {
        return getPokerId();
    }

    @Override
    public String value4() {
        return getName();
    }

    @Override
    public Boolean value5() {
        return getActive();
    }

    @Override
    public TicketRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TicketRecord value2(UUID value) {
        setIdSecure(value);
        return this;
    }

    @Override
    public TicketRecord value3(Long value) {
        setPokerId(value);
        return this;
    }

    @Override
    public TicketRecord value4(String value) {
        setName(value);
        return this;
    }

    @Override
    public TicketRecord value5(Boolean value) {
        setActive(value);
        return this;
    }

    @Override
    public TicketRecord values(Long value1, UUID value2, Long value3, String value4, Boolean value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TicketRecord
     */
    public TicketRecord() {
        super(Ticket.TICKET);
    }

    /**
     * Create a detached, initialised TicketRecord
     */
    public TicketRecord(Long id, UUID idSecure, Long pokerId, String name, Boolean active) {
        super(Ticket.TICKET);

        set(0, id);
        set(1, idSecure);
        set(2, pokerId);
        set(3, name);
        set(4, active);
    }
}
