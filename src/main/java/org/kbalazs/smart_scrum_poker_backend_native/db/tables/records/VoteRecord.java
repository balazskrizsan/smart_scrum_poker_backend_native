/*
 * This file is generated by jOOQ.
 */
package org.kbalazs.smart_scrum_poker_backend_native.db.tables.records;


import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record8;
import org.jooq.Row8;
import org.jooq.impl.UpdatableRecordImpl;
import org.kbalazs.smart_scrum_poker_backend_native.db.tables.Vote;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class VoteRecord extends UpdatableRecordImpl<VoteRecord> implements Record8<Long, Long, Short, Short, Short, Short, LocalDateTime, UUID> {

    private static final long serialVersionUID = -190132952;

    /**
     * Setter for <code>public.vote.id</code>.
     */
    public void setId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.vote.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.vote.ticket_id</code>.
     */
    public void setTicketId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.vote.ticket_id</code>.
     */
    public Long getTicketId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.vote.uncertainty</code>.
     */
    public void setUncertainty(Short value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.vote.uncertainty</code>.
     */
    public Short getUncertainty() {
        return (Short) get(2);
    }

    /**
     * Setter for <code>public.vote.complexity</code>.
     */
    public void setComplexity(Short value) {
        set(3, value);
    }

    /**
     * Getter for <code>public.vote.complexity</code>.
     */
    public Short getComplexity() {
        return (Short) get(3);
    }

    /**
     * Setter for <code>public.vote.effort</code>.
     */
    public void setEffort(Short value) {
        set(4, value);
    }

    /**
     * Getter for <code>public.vote.effort</code>.
     */
    public Short getEffort() {
        return (Short) get(4);
    }

    /**
     * Setter for <code>public.vote.calculated_point</code>.
     */
    public void setCalculatedPoint(Short value) {
        set(5, value);
    }

    /**
     * Getter for <code>public.vote.calculated_point</code>.
     */
    public Short getCalculatedPoint() {
        return (Short) get(5);
    }

    /**
     * Setter for <code>public.vote.created_at</code>.
     */
    public void setCreatedAt(LocalDateTime value) {
        set(6, value);
    }

    /**
     * Getter for <code>public.vote.created_at</code>.
     */
    public LocalDateTime getCreatedAt() {
        return (LocalDateTime) get(6);
    }

    /**
     * Setter for <code>public.vote.created_by</code>.
     */
    public void setCreatedBy(UUID value) {
        set(7, value);
    }

    /**
     * Getter for <code>public.vote.created_by</code>.
     */
    public UUID getCreatedBy() {
        return (UUID) get(7);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record8 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row8<Long, Long, Short, Short, Short, Short, LocalDateTime, UUID> fieldsRow() {
        return (Row8) super.fieldsRow();
    }

    @Override
    public Row8<Long, Long, Short, Short, Short, Short, LocalDateTime, UUID> valuesRow() {
        return (Row8) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Vote.VOTE.ID;
    }

    @Override
    public Field<Long> field2() {
        return Vote.VOTE.TICKET_ID;
    }

    @Override
    public Field<Short> field3() {
        return Vote.VOTE.UNCERTAINTY;
    }

    @Override
    public Field<Short> field4() {
        return Vote.VOTE.COMPLEXITY;
    }

    @Override
    public Field<Short> field5() {
        return Vote.VOTE.EFFORT;
    }

    @Override
    public Field<Short> field6() {
        return Vote.VOTE.CALCULATED_POINT;
    }

    @Override
    public Field<LocalDateTime> field7() {
        return Vote.VOTE.CREATED_AT;
    }

    @Override
    public Field<UUID> field8() {
        return Vote.VOTE.CREATED_BY;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getTicketId();
    }

    @Override
    public Short component3() {
        return getUncertainty();
    }

    @Override
    public Short component4() {
        return getComplexity();
    }

    @Override
    public Short component5() {
        return getEffort();
    }

    @Override
    public Short component6() {
        return getCalculatedPoint();
    }

    @Override
    public LocalDateTime component7() {
        return getCreatedAt();
    }

    @Override
    public UUID component8() {
        return getCreatedBy();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getTicketId();
    }

    @Override
    public Short value3() {
        return getUncertainty();
    }

    @Override
    public Short value4() {
        return getComplexity();
    }

    @Override
    public Short value5() {
        return getEffort();
    }

    @Override
    public Short value6() {
        return getCalculatedPoint();
    }

    @Override
    public LocalDateTime value7() {
        return getCreatedAt();
    }

    @Override
    public UUID value8() {
        return getCreatedBy();
    }

    @Override
    public VoteRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public VoteRecord value2(Long value) {
        setTicketId(value);
        return this;
    }

    @Override
    public VoteRecord value3(Short value) {
        setUncertainty(value);
        return this;
    }

    @Override
    public VoteRecord value4(Short value) {
        setComplexity(value);
        return this;
    }

    @Override
    public VoteRecord value5(Short value) {
        setEffort(value);
        return this;
    }

    @Override
    public VoteRecord value6(Short value) {
        setCalculatedPoint(value);
        return this;
    }

    @Override
    public VoteRecord value7(LocalDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public VoteRecord value8(UUID value) {
        setCreatedBy(value);
        return this;
    }

    @Override
    public VoteRecord values(Long value1, Long value2, Short value3, Short value4, Short value5, Short value6, LocalDateTime value7, UUID value8) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        value8(value8);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached VoteRecord
     */
    public VoteRecord() {
        super(Vote.VOTE);
    }

    /**
     * Create a detached, initialised VoteRecord
     */
    public VoteRecord(Long id, Long ticketId, Short uncertainty, Short complexity, Short effort, Short calculatedPoint, LocalDateTime createdAt, UUID createdBy) {
        super(Vote.VOTE);

        set(0, id);
        set(1, ticketId);
        set(2, uncertainty);
        set(3, complexity);
        set(4, effort);
        set(5, calculatedPoint);
        set(6, createdAt);
        set(7, createdBy);
    }
}
