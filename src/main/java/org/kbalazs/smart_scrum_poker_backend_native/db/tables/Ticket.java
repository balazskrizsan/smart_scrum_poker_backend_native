/*
 * This file is generated by jOOQ.
 */
package org.kbalazs.smart_scrum_poker_backend_native.db.tables;


import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.kbalazs.smart_scrum_poker_backend_native.db.Keys;
import org.kbalazs.smart_scrum_poker_backend_native.db.Public;
import org.kbalazs.smart_scrum_poker_backend_native.db.tables.records.TicketRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Ticket extends TableImpl<TicketRecord> {

    private static final long serialVersionUID = 2133744874;

    /**
     * The reference instance of <code>public.ticket</code>
     */
    public static final Ticket TICKET = new Ticket();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TicketRecord> getRecordType() {
        return TicketRecord.class;
    }

    /**
     * The column <code>public.ticket.id</code>.
     */
    public final TableField<TicketRecord, Long> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.ticket.id_secure</code>.
     */
    public final TableField<TicketRecord, UUID> ID_SECURE = createField(DSL.name("id_secure"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * The column <code>public.ticket.poker_id</code>.
     */
    public final TableField<TicketRecord, Long> POKER_ID = createField(DSL.name("poker_id"), org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.ticket.name</code>.
     */
    public final TableField<TicketRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>public.ticket.active</code>.
     */
    public final TableField<TicketRecord, Boolean> ACTIVE = createField(DSL.name("active"), org.jooq.impl.SQLDataType.BOOLEAN.nullable(false).defaultValue(org.jooq.impl.DSL.field("false", org.jooq.impl.SQLDataType.BOOLEAN)), this, "");

    /**
     * Create a <code>public.ticket</code> table reference
     */
    public Ticket() {
        this(DSL.name("ticket"), null);
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(String alias) {
        this(DSL.name(alias), TICKET);
    }

    /**
     * Create an aliased <code>public.ticket</code> table reference
     */
    public Ticket(Name alias) {
        this(alias, TICKET);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased) {
        this(alias, aliased, null);
    }

    private Ticket(Name alias, Table<TicketRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Ticket(Table<O> child, ForeignKey<O, TicketRecord> key) {
        super(child, key, TICKET);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<TicketRecord, Long> getIdentity() {
        return Keys.IDENTITY_TICKET;
    }

    @Override
    public UniqueKey<TicketRecord> getPrimaryKey() {
        return Keys.TICKET__PK___ID;
    }

    @Override
    public List<UniqueKey<TicketRecord>> getKeys() {
        return Arrays.<UniqueKey<TicketRecord>>asList(Keys.TICKET__PK___ID, Keys.TICKET__UNIQUE___ID_SECURE);
    }

    @Override
    public List<ForeignKey<TicketRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TicketRecord, ?>>asList(Keys.TICKET__TICKET__FK___POKER_ID___POKER__ID___ON_DELETE_CASCADE);
    }

    public Poker poker() {
        return new Poker(this, Keys.TICKET__TICKET__FK___POKER_ID___POKER__ID___ON_DELETE_CASCADE);
    }

    @Override
    public Ticket as(String alias) {
        return new Ticket(DSL.name(alias), this);
    }

    @Override
    public Ticket as(Name alias) {
        return new Ticket(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(String name) {
        return new Ticket(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Ticket rename(Name name) {
        return new Ticket(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, UUID, Long, String, Boolean> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
